"""
Recuperador de Banco SQL Server - Suspect v1.3
Com corre√ß√£o de permiss√µes READ-ONLY
"""

import sys
import os
import time
import shutil
import pyodbc
import subprocess
import stat
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                             QHBoxLayout, QLabel, QLineEdit, QPushButton, 
                             QTextEdit, QFileDialog, QMessageBox, QGroupBox,
                             QRadioButton, QProgressBar)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QFont


class ServicosSQLManager:
    """Gerenciador de servi√ßos SQL Server"""
    
    @staticmethod
    def listar_servicos_sql():
        try:
            servicos = []
            
            padroes = [
                'MSSQL', 'SQLBrowser', 'SQLSERVERAGENT', 'SQLWriter',
                'SQLTELEMETRY', 'MSSQLFDLauncher', 'SSASTELEMETRY',
                'SSISTELEMETRY', 'SQLServerReportingServices', 'MSSQLServerOLAPService'
            ]
            
            for padrao in padroes:
                cmd = f'sc query type= service state= all | findstr /i "{padrao}"'
                resultado = subprocess.run(cmd, shell=True, capture_output=True, text=True, encoding='cp850', errors='ignore')
                
                linhas = resultado.stdout.split('\n')
                for linha in linhas:
                    if 'SERVICE_NAME:' in linha:
                        nome_servico = linha.split('SERVICE_NAME:')[1].strip()
                        if nome_servico and nome_servico not in servicos:
                            servicos.append(nome_servico)
            
            if not servicos:
                cmd_ps = 'powershell -Command "Get-Service | Where-Object {$_.DisplayName -like \'*SQL*\'} | Select-Object -ExpandProperty Name"'
                resultado_ps = subprocess.run(cmd_ps, shell=True, capture_output=True, text=True, encoding='utf-8', errors='ignore')
                
                if resultado_ps.returncode == 0:
                    linhas_ps = resultado_ps.stdout.strip().split('\n')
                    for linha in linhas_ps:
                        nome = linha.strip()
                        if nome and nome not in servicos:
                            servicos.append(nome)
            
            return servicos
            
        except Exception as e:
            return []
    
    @staticmethod
    def obter_estado_servico(nome_servico):
        try:
            cmd = f'sc query "{nome_servico}"'
            resultado = subprocess.run(cmd, shell=True, capture_output=True, text=True, encoding='cp850', errors='ignore')
            
            if 'RUNNING' in resultado.stdout:
                return 'RUNNING'
            elif 'STOPPED' in resultado.stdout:
                return 'STOPPED'
            elif 'PAUSED' in resultado.stdout:
                return 'PAUSED'
            return 'UNKNOWN'
        except:
            return 'UNKNOWN'
    
    @staticmethod
    def parar_servico(nome_servico):
        try:
            cmd = f'net stop "{nome_servico}" /y'
            subprocess.run(cmd, shell=True, capture_output=True, text=True, encoding='cp850', errors='ignore')
            time.sleep(1)
            
            estado = ServicosSQLManager.obter_estado_servico(nome_servico)
            if estado == 'STOPPED':
                return True
            
            cmd = f'sc stop "{nome_servico}"'
            subprocess.run(cmd, shell=True, capture_output=True, text=True, encoding='cp850', errors='ignore')
            time.sleep(2)
            
            estado = ServicosSQLManager.obter_estado_servico(nome_servico)
            return estado == 'STOPPED'
        except:
            return False
    
    @staticmethod
    def iniciar_servico(nome_servico):
        try:
            cmd = f'net start "{nome_servico}"'
            subprocess.run(cmd, shell=True, capture_output=True, text=True, encoding='cp850', errors='ignore')
            time.sleep(2)
            
            estado = ServicosSQLManager.obter_estado_servico(nome_servico)
            return estado == 'RUNNING'
        except:
            return False


class WorkerThread(QThread):
    """Thread para executar comandos SQL sem travar a interface"""
    log_signal = pyqtSignal(str)
    progress_signal = pyqtSignal(int)
    finished_signal = pyqtSignal(bool, str)
    
    def __init__(self, parametros, etapa):
        super().__init__()
        self.parametros = parametros
        self.etapa = etapa
    
    def log(self, mensagem):
        self.log_signal.emit(mensagem)
    
    def executar_sql(self, sql, esperar_erro=False):
        try:
            conn_str = self.obter_connection_string()
            conexao = pyodbc.connect(conn_str, timeout=30, autocommit=True)
            cursor = conexao.cursor()
            cursor.execute(sql)
            conexao.close()
            return True
        except Exception as e:
            if esperar_erro:
                return True
            self.log(f"‚ùå Erro: {str(e)}")
            return False
    
    def obter_connection_string(self):
        servidor = self.parametros['servidor']
        if self.parametros['auth_windows']:
            return (
                f"Driver={{ODBC Driver 17 for SQL Server}};"
                f"Server={servidor};"
                f"Database=master;"
                f"Trusted_Connection=yes;"
            )
        else:
            usuario = self.parametros['usuario']
            senha = self.parametros['senha']
            return (
                f"Driver={{ODBC Driver 17 for SQL Server}};"
                f"Server={servidor};"
                f"Database=master;"
                f"UID={usuario};"
                f"PWD={senha};"
            )
    
    def verificar_banco_existe(self, nome_banco):
        try:
            conn_str = self.obter_connection_string()
            conexao = pyodbc.connect(conn_str, timeout=10)
            cursor = conexao.cursor()
            cursor.execute(f"SELECT name FROM sys.databases WHERE name = '{nome_banco}'")
            resultado = cursor.fetchone()
            conexao.close()
            return resultado is not None
        except:
            return False
    
    def remover_readonly(self, caminho):
        """Remove atributo READ-ONLY de arquivo"""
        try:
            if os.path.exists(caminho):
                # Remover atributo READ-ONLY
                os.chmod(caminho, stat.S_IWRITE | stat.S_IREAD)
                
                # M√©todo alternativo via attrib
                subprocess.run(f'attrib -R "{caminho}"', shell=True, capture_output=True)
                
                return True
        except Exception as e:
            self.log(f"   ‚ö†Ô∏è Aviso ao remover READ-ONLY: {e}")
            return False
    
    def run(self):
        try:
            nome_banco = self.parametros['nome_banco']
            caminho_mdf_original = self.parametros['caminho_mdf'].replace('/', '\\')
            caminho_ldf_original = self.parametros['caminho_ldf'].replace('/', '\\')
            
            dir_base = os.path.dirname(caminho_mdf_original)
            caminho_mdf_novo = os.path.join(dir_base, f"{nome_banco}_recuperado.mdf")
            caminho_ldf_novo = os.path.join(dir_base, f"{nome_banco}_recuperado_log.ldf")
            
            if self.etapa == 1:
                self.log("üîß ETAPA 1/6: Preparando ambiente...")
                self.progress_signal.emit(1)
                
                if self.verificar_banco_existe(nome_banco):
                    self.log(f"   ‚ö†Ô∏è Banco [{nome_banco}] j√° existe")
                    self.log(f"   ‚Üí Tentando remover...")
                    
                    self.executar_sql(f"ALTER DATABASE [{nome_banco}] SET OFFLINE WITH ROLLBACK IMMEDIATE", esperar_erro=True)
                    time.sleep(2)
                    self.executar_sql(f"DROP DATABASE [{nome_banco}]", esperar_erro=True)
                    time.sleep(2)
                    
                    if self.verificar_banco_existe(nome_banco):
                        self.finished_signal.emit(False, "Banco j√° existe. Remova manualmente.")
                        return
                    self.log(f"   ‚úÖ Banco existente removido")
                
                if os.path.exists(caminho_mdf_novo):
                    try:
                        self.remover_readonly(caminho_mdf_novo)
                        os.remove(caminho_mdf_novo)
                        self.log(f"   ‚úÖ MDF anterior removido")
                    except:
                        self.finished_signal.emit(False, f"Remova manualmente: {caminho_mdf_novo}")
                        return
                
                if os.path.exists(caminho_ldf_novo):
                    try:
                        self.remover_readonly(caminho_ldf_novo)
                        os.remove(caminho_ldf_novo)
                        self.log(f"   ‚úÖ LDF anterior removido")
                    except:
                        pass
                
                if not os.path.exists(caminho_mdf_original):
                    self.finished_signal.emit(False, "MDF original n√£o encontrado")
                    return
                
                tamanho = os.path.getsize(caminho_mdf_original)
                self.log(f"   ‚Üí MDF original: {tamanho / 1024 / 1024:.1f} MB")
                
                self.log("")
                self.log("üîß Criando banco em branco...")
                
                sql = f"""
CREATE DATABASE [{nome_banco}]
ON (NAME = N'{nome_banco}',
    FILENAME = N'{caminho_mdf_novo}',
    SIZE = 10MB)
LOG ON (NAME = N'{nome_banco}_log',
        FILENAME = N'{caminho_ldf_novo}',
        SIZE = 5MB)
"""
                if not self.executar_sql(sql):
                    self.finished_signal.emit(False, "Erro ao criar banco tempor√°rio")
                    return
                
                self.log(f"‚úÖ Banco [{nome_banco}] criado")
                
                self.log("")
                self.log("üîß ETAPA 2/6: Configurando OFFLINE...")
                self.progress_signal.emit(2)
                
                if not self.executar_sql(f"ALTER DATABASE [{nome_banco}] SET READ_ONLY"):
                    self.finished_signal.emit(False, "Erro ao definir READ_ONLY")
                    return
                
                if not self.executar_sql(f"ALTER DATABASE [{nome_banco}] SET OFFLINE"):
                    self.finished_signal.emit(False, "Erro ao definir OFFLINE")
                    return
                
                self.log("‚úÖ Banco OFFLINE")
                self.log("")
                self.log("=" * 70)
                self.log("‚è∏Ô∏è PR√ìXIMO PASSO")
                self.log("=" * 70)
                self.log("")
                self.log("Clique no bot√£o '‚èπÔ∏è Parar Servi√ßos SQL' abaixo")
                self.log("")
                
                self.finished_signal.emit(True, "aguardando_parada")
            
            elif self.etapa == 2:
                self.log("üîß ETAPA 3/6: ONLINE, EMERGENCY, SINGLE_USER...")
                self.progress_signal.emit(3)
                
                # Remover READ-ONLY do arquivo f√≠sico
                self.log("   ‚Üí Removendo atributo READ-ONLY do MDF...")
                self.remover_readonly(caminho_mdf_novo)
                
                self.executar_sql(f"ALTER DATABASE [{nome_banco}] SET ONLINE", esperar_erro=True)
                time.sleep(1)
                
                # Tentar remover READ_ONLY do banco
                self.executar_sql(f"ALTER DATABASE [{nome_banco}] SET READ_WRITE WITH ROLLBACK IMMEDIATE", esperar_erro=True)
                time.sleep(1)
                
                self.executar_sql(f"ALTER DATABASE [{nome_banco}] SET EMERGENCY", esperar_erro=True)
                self.executar_sql(f"ALTER DATABASE [{nome_banco}] SET SINGLE_USER WITH ROLLBACK IMMEDIATE", esperar_erro=True)
                
                self.log("‚úÖ Comandos executados")
                
                self.log("")
                self.log("üîß ETAPA 4/6: Verificando LDF...")
                self.progress_signal.emit(4)
                
                if os.path.exists(caminho_ldf_novo):
                    self.finished_signal.emit(False, "LDF ainda existe!")
                    return
                
                self.log("‚úÖ LDF foi exclu√≠do")
                
                self.log("")
                self.log("üîß ETAPA 5/6: Reconstruindo LOG...")
                self.progress_signal.emit(5)
                
                # Garantir que n√£o est√° READ-ONLY antes do REBUILD
                self.log("   ‚Üí Verificando permiss√µes do arquivo...")
                self.remover_readonly(caminho_mdf_novo)
                
                sql_rebuild = f"""
ALTER DATABASE [{nome_banco}] REBUILD LOG ON
(NAME = N'{nome_banco}_log', FILENAME = N'{caminho_ldf_novo}')
"""
                
                if not self.executar_sql(sql_rebuild):
                    # Tentar m√©todo alternativo
                    self.log("   ‚Üí Tentando m√©todo alternativo...")
                    
                    # For√ßar READ_WRITE no banco
                    self.executar_sql(f"EXEC sp_dboption '{nome_banco}', 'read only', 'FALSE'", esperar_erro=True)
                    time.sleep(2)
                    
                    # Tentar novamente
                    if not self.executar_sql(sql_rebuild):
                        self.finished_signal.emit(False, "Erro ao reconstruir LOG. Verifique permiss√µes da pasta.")
                        return
                
                self.log("‚úÖ LOG reconstru√≠do")
                
                self.log("")
                self.log("üîß ETAPA 6/6: MULTI_USER...")
                self.progress_signal.emit(6)
                
                if not self.executar_sql(f"ALTER DATABASE [{nome_banco}] SET MULTI_USER"):
                    self.finished_signal.emit(False, "Erro ao definir MULTI_USER")
                    return
                
                self.log("‚úÖ MULTI_USER")
                self.log("")
                self.log("=" * 70)
                self.log("üéâ RECUPERA√á√ÉO CONCLU√çDA!")
                self.log("=" * 70)
                self.log("")
                
                self.finished_signal.emit(True, "concluido")
        
        except Exception as e:
            self.log(f"‚ùå Erro: {str(e)}")
            self.finished_signal.emit(False, str(e))


class RecuperadorSQL(QMainWindow):
    def __init__(self):
        super().__init__()
        self.worker = None
        self.aguardando_manual = False
        self.parametros_salvos = None
        self.servicos_parados = []
        self.initUI()
    
    def initUI(self):
        self.setWindowTitle('Recuperador de Banco SQL Server - Suspect v1.3')
        self.setGeometry(100, 100, 950, 750)
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        grupo_conexao = QGroupBox("1. Conex√£o SQL Server")
        layout_conexao = QVBoxLayout()
        
        h1 = QHBoxLayout()
        h1.addWidget(QLabel("Servidor\\Inst√¢ncia:"))
        self.txt_servidor = QLineEdit("localhost")
        h1.addWidget(self.txt_servidor)
        layout_conexao.addLayout(h1)
        
        h2 = QHBoxLayout()
        self.radio_windows = QRadioButton("Autentica√ß√£o Windows")
        self.radio_windows.toggled.connect(self.toggle_auth)
        self.radio_sql = QRadioButton("Autentica√ß√£o SQL Server")
        self.radio_sql.setChecked(True)
        h2.addWidget(self.radio_windows)
        h2.addWidget(self.radio_sql)
        layout_conexao.addLayout(h2)
        
        h3 = QHBoxLayout()
        h3.addWidget(QLabel("Usu√°rio:"))
        self.txt_usuario = QLineEdit("sa")
        h3.addWidget(self.txt_usuario)
        h3.addWidget(QLabel("Senha:"))
        self.txt_senha = QLineEdit("_43690")
        self.txt_senha.setEchoMode(QLineEdit.Password)
        h3.addWidget(self.txt_senha)
        layout_conexao.addLayout(h3)
        
        self.btn_testar = QPushButton("Testar Conex√£o")
        self.btn_testar.clicked.connect(self.testar_conexao)
        layout_conexao.addWidget(self.btn_testar)
        
        grupo_conexao.setLayout(layout_conexao)
        layout.addWidget(grupo_conexao)
        
        grupo_banco = QGroupBox("2. Configura√ß√£o do Banco")
        layout_banco = QVBoxLayout()
        
        h4 = QHBoxLayout()
        h4.addWidget(QLabel("Nome do Banco:"))
        self.txt_nome_banco = QLineEdit()
        h4.addWidget(self.txt_nome_banco)
        layout_banco.addLayout(h4)
        
        h5 = QHBoxLayout()
        h5.addWidget(QLabel("Arquivo MDF Original:"))
        self.txt_mdf = QLineEdit()
        h5.addWidget(self.txt_mdf)
        btn_mdf = QPushButton("...")
        btn_mdf.clicked.connect(self.selecionar_mdf)
        h5.addWidget(btn_mdf)
        layout_banco.addLayout(h5)
        
        h6 = QHBoxLayout()
        h6.addWidget(QLabel("Arquivo LDF Original:"))
        self.txt_ldf = QLineEdit()
        h6.addWidget(self.txt_ldf)
        layout_banco.addLayout(h6)
        
        grupo_banco.setLayout(layout_banco)
        layout.addWidget(grupo_banco)
        
        grupo_progresso = QGroupBox("3. Progresso da Recupera√ß√£o")
        layout_progresso = QVBoxLayout()
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setMaximum(6)
        self.progress_bar.setValue(0)
        layout_progresso.addWidget(self.progress_bar)
        
        self.txt_log = QTextEdit()
        self.txt_log.setReadOnly(True)
        self.txt_log.setFont(QFont("Courier New", 9))
        layout_progresso.addWidget(self.txt_log)
        
        grupo_progresso.setLayout(layout_progresso)
        layout.addWidget(grupo_progresso)
        
        h7 = QHBoxLayout()
        h7.addStretch()
        
        self.btn_iniciar = QPushButton("Iniciar Recupera√ß√£o")
        self.btn_iniciar.clicked.connect(self.iniciar_recuperacao)
        self.btn_iniciar.setEnabled(False)
        self.btn_iniciar.setStyleSheet("QPushButton { background-color: #ff9800; color: white; font-weight: bold; padding: 10px; }")
        h7.addWidget(self.btn_iniciar)
        
        self.btn_parar_servicos = QPushButton("‚èπÔ∏è Parar Servi√ßos SQL")
        self.btn_parar_servicos.clicked.connect(self.parar_servicos)
        self.btn_parar_servicos.setVisible(False)
        self.btn_parar_servicos.setStyleSheet("QPushButton { background-color: #f44336; color: white; font-weight: bold; padding: 10px; }")
        h7.addWidget(self.btn_parar_servicos)
        
        self.btn_substituir = QPushButton("Substituir Arquivos")
        self.btn_substituir.clicked.connect(self.substituir_arquivos)
        self.btn_substituir.setVisible(False)
        self.btn_substituir.setStyleSheet("QPushButton { background-color: #2196f3; color: white; font-weight: bold; padding: 10px; }")
        h7.addWidget(self.btn_substituir)
        
        self.btn_iniciar_servicos = QPushButton("‚ñ∂Ô∏è Iniciar Servi√ßos SQL")
        self.btn_iniciar_servicos.clicked.connect(self.iniciar_servicos)
        self.btn_iniciar_servicos.setVisible(False)
        self.btn_iniciar_servicos.setStyleSheet("QPushButton { background-color: #4caf50; color: white; font-weight: bold; padding: 10px; }")
        h7.addWidget(self.btn_iniciar_servicos)
        
        self.btn_continuar = QPushButton("Continuar Recupera√ß√£o")
        self.btn_continuar.clicked.connect(self.continuar_recuperacao)
        self.btn_continuar.setVisible(False)
        self.btn_continuar.setStyleSheet("QPushButton { background-color: #4caf50; color: white; font-weight: bold; padding: 10px; }")
        h7.addWidget(self.btn_continuar)
        
        layout.addLayout(h7)
        
        self.adicionar_log("‚úì Sistema pronto")
        self.adicionar_log("")
        self.adicionar_log("üìã PROCESSO:")
        self.adicionar_log("   1. Teste a conex√£o")
        self.adicionar_log("   2. Selecione o MDF original")
        self.adicionar_log("   3. Inicie a recupera√ß√£o")
    
    def toggle_auth(self):
        windows = self.radio_windows.isChecked()
        self.txt_usuario.setEnabled(not windows)
        self.txt_senha.setEnabled(not windows)
    
    def selecionar_mdf(self):
        arquivo, _ = QFileDialog.getOpenFileName(self, "Selecione o MDF", "", "Arquivos MDF (*.mdf)")
        if arquivo:
            self.txt_mdf.setText(arquivo)
            self.txt_ldf.setText(arquivo.replace('.mdf', '.ldf'))
            if not self.txt_nome_banco.text():
                self.txt_nome_banco.setText(os.path.splitext(os.path.basename(arquivo))[0])
    
    def adicionar_log(self, mensagem):
        self.txt_log.append(mensagem)
    
    def testar_conexao(self):
        try:
            parametros = self.obter_parametros()
            servidor = parametros['servidor']
            
            if parametros['auth_windows']:
                conn_str = f"Driver={{ODBC Driver 17 for SQL Server}};Server={servidor};Database=master;Trusted_Connection=yes;"
            else:
                conn_str = f"Driver={{ODBC Driver 17 for SQL Server}};Server={servidor};Database=master;UID={parametros['usuario']};PWD={parametros['senha']};"
            
            self.adicionar_log("")
            self.adicionar_log("üîå Testando...")
            conexao = pyodbc.connect(conn_str, timeout=10)
            conexao.close()
            self.adicionar_log("‚úÖ Conex√£o OK!")
            self.btn_iniciar.setEnabled(True)
        except Exception as e:
            self.adicionar_log(f"‚ùå Erro: {str(e)}")
    
    def obter_parametros(self):
        return {
            'servidor': self.txt_servidor.text().strip(),
            'auth_windows': self.radio_windows.isChecked(),
            'usuario': self.txt_usuario.text().strip(),
            'senha': self.txt_senha.text(),
            'nome_banco': self.txt_nome_banco.text().strip(),
            'caminho_mdf': self.txt_mdf.text().strip(),
            'caminho_ldf': self.txt_ldf.text().strip()
        }
    
    def iniciar_recuperacao(self):
        if not self.txt_mdf.text().strip() or not os.path.exists(self.txt_mdf.text().strip()):
            QMessageBox.warning(self, "Aten√ß√£o", "Selecione o MDF")
            return
        
        self.btn_iniciar.setEnabled(False)
        self.adicionar_log("")
        self.adicionar_log("üöÄ INICIANDO")
        
        self.parametros_salvos = self.obter_parametros()
        self.worker = WorkerThread(self.parametros_salvos, etapa=1)
        self.worker.log_signal.connect(self.adicionar_log)
        self.worker.progress_signal.connect(self.progress_bar.setValue)
        self.worker.finished_signal.connect(self.on_etapa1_concluida)
        self.worker.start()
    
    def on_etapa1_concluida(self, sucesso, mensagem):
        if sucesso and mensagem == "aguardando_parada":
            self.btn_iniciar.setVisible(False)
            self.btn_parar_servicos.setVisible(True)
        elif not sucesso:
            QMessageBox.critical(self, "Erro", mensagem)
            self.btn_iniciar.setEnabled(True)
    
    def parar_servicos(self):
        self.adicionar_log("")
        self.adicionar_log("üîç Buscando servi√ßos SQL Server...")
        
        servicos = ServicosSQLManager.listar_servicos_sql()
        
        if not servicos:
            self.adicionar_log("‚ö†Ô∏è Nenhum servi√ßo encontrado automaticamente")
            self.adicionar_log("")
            self.adicionar_log("üìã A√ß√£o manual necess√°ria:")
            self.adicionar_log("   1. Windows + R ‚Üí services.msc")
            self.adicionar_log("   2. Parar manualmente os servi√ßos SQL")
            
            self.btn_parar_servicos.setVisible(False)
            self.btn_substituir.setVisible(True)
            return
        
        self.adicionar_log(f"   Encontrados {len(servicos)} servi√ßo(s)")
        self.servicos_parados = []
        sucesso_total = True
        
        for servico in servicos:
            estado = ServicosSQLManager.obter_estado_servico(servico)
            
            if estado == 'RUNNING':
                self.adicionar_log(f"   ‚Üí Parando: {servico}...")
                if ServicosSQLManager.parar_servico(servico):
                    self.servicos_parados.append(servico)
                    self.adicionar_log(f"   ‚úÖ Parado: {servico}")
                else:
                    self.adicionar_log(f"   ‚ö†Ô∏è Falha ao parar: {servico}")
                    sucesso_total = False
            else:
                self.adicionar_log(f"   ‚ÑπÔ∏è J√° parado: {servico}")
        
        if sucesso_total or self.servicos_parados:
            self.adicionar_log("")
            self.adicionar_log("‚úÖ Servi√ßos parados com sucesso!")
            self.adicionar_log("")
            self.adicionar_log("üìã Pr√≥ximo passo:")
            self.adicionar_log("   Clique em 'Substituir Arquivos'")
            
            self.btn_parar_servicos.setVisible(False)
            self.btn_substituir.setVisible(True)
        else:
            self.adicionar_log("")
            self.adicionar_log("‚ùå N√£o foi poss√≠vel parar os servi√ßos")
            self.adicionar_log("")
            self.adicionar_log("üí° Execute o programa como ADMINISTRADOR")
            QMessageBox.warning(
                self,
                "Permiss√£o Negada",
                "N√£o foi poss√≠vel parar os servi√ßos.\n\n" +
                "Execute o programa como ADMINISTRADOR:\n" +
                "‚Ä¢ Bot√£o direito no .exe\n" +
                "‚Ä¢ Executar como administrador"
            )
    
    def substituir_arquivos(self):
        self.adicionar_log("")
        self.adicionar_log("üîÑ Substituindo arquivos...")
        self.adicionar_log("   ‚è≥ Aguardando 5 segundos...")
        time.sleep(5)
        
        nome_banco = self.parametros_salvos['nome_banco']
        caminho_mdf_original = self.parametros_salvos['caminho_mdf'].replace('/', '\\')
        dir_base = os.path.dirname(caminho_mdf_original)
        caminho_mdf_novo = os.path.join(dir_base, f"{nome_banco}_recuperado.mdf")
        caminho_ldf_novo = os.path.join(dir_base, f"{nome_banco}_recuperado_log.ldf")
        
        sucesso = False
        for tentativa in range(1, 4):
            try:
                self.adicionar_log(f"   ‚Üí Tentativa {tentativa}/3...")
                
                if os.path.exists(caminho_mdf_novo):
                    # Remover READ-ONLY antes de deletar
                    os.chmod(caminho_mdf_novo, stat.S_IWRITE | stat.S_IREAD)
                    subprocess.run(f'attrib -R "{caminho_mdf_novo}"', shell=True, capture_output=True)
                    os.remove(caminho_mdf_novo)
                
                shutil.copy2(caminho_mdf_original, caminho_mdf_novo)
                
                # Remover READ-ONLY do arquivo copiado
                os.chmod(caminho_mdf_novo, stat.S_IWRITE | stat.S_IREAD)
                subprocess.run(f'attrib -R "{caminho_mdf_novo}"', shell=True, capture_output=True)
                
                tamanho = os.path.getsize(caminho_mdf_novo)
                self.adicionar_log(f"   ‚úÖ MDF substitu√≠do ({tamanho / 1024 / 1024:.1f} MB)")
                self.adicionar_log(f"   ‚úÖ Permiss√µes ajustadas")
                sucesso = True
                break
                
            except Exception as e:
                if tentativa < 3:
                    self.adicionar_log(f"   ‚è≥ Falhou, aguardando...")
                    time.sleep(3)
                else:
                    self.adicionar_log(f"   ‚ùå Erro: {str(e)}")
                    QMessageBox.critical(self, "Erro", f"Falha:\n{str(e)}")
                    return
        
        if not sucesso:
            return
        
        try:
            if os.path.exists(caminho_ldf_novo):
                os.chmod(caminho_ldf_novo, stat.S_IWRITE | stat.S_IREAD)
                os.remove(caminho_ldf_novo)
                self.adicionar_log(f"   ‚úÖ LDF exclu√≠do")
        except Exception as e:
            self.adicionar_log(f"   ‚ö†Ô∏è Erro ao excluir LDF: {e}")
        
        self.adicionar_log("")
        self.adicionar_log("‚úÖ Substitui√ß√£o conclu√≠da!")
        self.adicionar_log("")
        self.adicionar_log("üìã Pr√≥ximo passo:")
        self.adicionar_log("   Clique em '‚ñ∂Ô∏è Iniciar Servi√ßos SQL'")
        
        self.btn_substituir.setVisible(False)
        self.btn_iniciar_servicos.setVisible(True)
    
    def iniciar_servicos(self):
        self.adicionar_log("")
        self.adicionar_log("‚ñ∂Ô∏è Iniciando servi√ßos SQL Server...")
        
        if not self.servicos_parados:
            self.adicionar_log("   ‚ÑπÔ∏è Nenhum servi√ßo foi parado automaticamente")
            self.adicionar_log("")
            self.adicionar_log("üìã A√ß√£o manual necess√°ria:")
            self.adicionar_log("   1. Windows + R ‚Üí services.msc")
            self.adicionar_log("   2. Iniciar os servi√ßos SQL Server")
        else:
            for servico in self.servicos_parados:
                self.adicionar_log(f"   ‚Üí Iniciando: {servico}...")
                if ServicosSQLManager.iniciar_servico(servico):
                    self.adicionar_log(f"   ‚úÖ Iniciado: {servico}")
                else:
                    self.adicionar_log(f"   ‚ö†Ô∏è Falha ao iniciar: {servico}")
            
            self.adicionar_log("")
            self.adicionar_log("‚úÖ Servi√ßos iniciados!")
        
        self.adicionar_log("")
        self.adicionar_log("‚è≥ Aguardando 10 segundos...")
        time.sleep(10)
        
        self.adicionar_log("")
        self.adicionar_log("üìã Pr√≥ximo passo:")
        self.adicionar_log("   Clique em 'Continuar Recupera√ß√£o'")
        
        self.btn_iniciar_servicos.setVisible(False)
        self.btn_continuar.setVisible(True)
    
    def continuar_recuperacao(self):
        self.btn_continuar.setEnabled(False)
        self.adicionar_log("")
        self.adicionar_log("‚ñ∂Ô∏è CONTINUANDO")
        
        self.worker = WorkerThread(self.parametros_salvos, etapa=2)
        self.worker.log_signal.connect(self.adicionar_log)
        self.worker.progress_signal.connect(self.progress_bar.setValue)
        self.worker.finished_signal.connect(self.on_recuperacao_concluida)
        self.worker.start()
    
    def on_recuperacao_concluida(self, sucesso, mensagem):
        if sucesso:
            QMessageBox.information(self, "Sucesso", "Recupera√ß√£o conclu√≠da!\n\nExecute DBCC CHECKDB.")
            self.btn_continuar.setVisible(False)
            self.btn_iniciar.setVisible(True)
            self.btn_iniciar.setEnabled(True)
            self.progress_bar.setValue(0)
        else:
            QMessageBox.critical(self, "Erro", mensagem)
            self.btn_continuar.setEnabled(True)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    janela = RecuperadorSQL()
    janela.show()
    sys.exit(app.exec_())
